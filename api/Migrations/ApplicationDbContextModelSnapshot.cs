// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.LineModel.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("api.Models.LineModel.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StopId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StopId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("api.Models.LineModel.Remind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StopId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StopId");

                    b.HasIndex("UserId");

                    b.ToTable("Reminds");
                });

            modelBuilder.Entity("api.Models.LineModel.Stop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<string>("StopName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("api.Models.LineModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Profile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Models.LineModel.Favorite", b =>
                {
                    b.HasOne("api.Models.LineModel.Stop", "Stop")
                        .WithMany("Favorites")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.LineModel.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.LineModel.Remind", b =>
                {
                    b.HasOne("api.Models.LineModel.Stop", "Stop")
                        .WithMany("Reminds")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.LineModel.User", "User")
                        .WithMany("Reminds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("api.Models.LineModel.RemindTimeValue", "RemindTime", b1 =>
                        {
                            b1.Property<int>("RemindId")
                                .HasColumnType("int");

                            b1.Property<string>("RepeatWeekTime")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SelectedRemindTime")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RemindId");

                            b1.ToTable("Reminds");

                            b1.WithOwner()
                                .HasForeignKey("RemindId");

                            b1.OwnsOne("api.Models.LineModel.BusShowUpTime", "BusShowUpTime", b2 =>
                                {
                                    b2.Property<int>("RemindTimeValueRemindId")
                                        .HasColumnType("int");

                                    b2.Property<string>("End")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Start")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("RemindTimeValueRemindId");

                                    b2.ToTable("Reminds");

                                    b2.WithOwner()
                                        .HasForeignKey("RemindTimeValueRemindId");
                                });

                            b1.Navigation("BusShowUpTime")
                                .IsRequired();
                        });

                    b.Navigation("RemindTime");

                    b.Navigation("Stop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.LineModel.Stop", b =>
                {
                    b.HasOne("api.Models.LineModel.Bus", "Bus")
                        .WithMany("Stops")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("api.Models.LineModel.Bus", b =>
                {
                    b.Navigation("Stops");
                });

            modelBuilder.Entity("api.Models.LineModel.Stop", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Reminds");
                });

            modelBuilder.Entity("api.Models.LineModel.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Reminds");
                });
#pragma warning restore 612, 618
        }
    }
}
